---
// Define search data
const searchData = [
    // Services
    { title: 'Home Renovations', type: 'service', url: '/services#renovations', keywords: ['renovation', 'remodel', 'home improvement'] },
    { title: 'New Builds', type: 'service', url: '/services#new-builds', keywords: ['new home', 'construction', 'build'] },
    { title: 'Kitchen Renovations', type: 'service', url: '/services#kitchen', keywords: ['kitchen', 'cooking', 'cabinetry'] },
    { title: 'Bathroom Renovations', type: 'service', url: '/services#bathroom', keywords: ['bathroom', 'shower', 'plumbing'] },
    { title: 'Deck Construction', type: 'service', url: '/services#decks', keywords: ['deck', 'outdoor', 'patio'] },
    { title: 'Commercial Builds', type: 'service', url: '/services#commercial', keywords: ['commercial', 'business', 'retail'] },
    
    // Pages
    { title: 'About Us', type: 'page', url: '/about', keywords: ['company', 'history', 'team'] },
    { title: 'Contact', type: 'page', url: '/contact', keywords: ['contact', 'quote', 'inquiry'] },
    { title: 'Gallery', type: 'page', url: '/gallery', keywords: ['projects', 'portfolio', 'work'] },
    { title: 'Client Stories', type: 'page', url: '/client-stories', keywords: ['testimonials', 'reviews', 'feedback'] },
];
---

<div class="relative group">
    <div class="relative">
        <input 
            type="text" 
            id="search-input"
            placeholder="Search services, projects..." 
            class="w-full px-4 py-2 pl-10 pr-4 text-sm text-gray-700 bg-gray-50 border border-gray-200 
            rounded-lg focus:outline-none focus:border-[#B22222] focus:ring-2 focus:ring-[#B22222]/20"
        />
        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        </div>
    </div>

    {/* Search Results */}
    <div id="search-results" 
        class="absolute z-50 w-full mt-2 bg-white rounded-lg shadow-lg border border-gray-100 
        opacity-0 invisible transition-all duration-200 transform -translate-y-2 
        group-focus-within:opacity-100 group-focus-within:visible group-focus-within:translate-y-0">
    </div>
</div>

<script define:vars={{ searchData }}>
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');

    function createResultItem(item) {
        const div = document.createElement('div');
        div.className = 'flex items-center px-4 py-3 hover:bg-gray-50 cursor-pointer transition-colors';
        
        // Icon based on type
        const iconDiv = document.createElement('div');
        iconDiv.className = 'mr-3 text-[#B22222]';
        
        if (item.type === 'service') {
            iconDiv.innerHTML = `
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
            `;
        } else {
            iconDiv.innerHTML = `
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
            `;
        }

        const content = document.createElement('div');
        content.className = 'flex flex-col';
        
        const title = document.createElement('span');
        title.className = 'text-sm font-medium text-gray-800';
        title.textContent = item.title;
        
        const type = document.createElement('span');
        type.className = 'text-xs text-gray-500';
        type.textContent = item.type.charAt(0).toUpperCase() + item.type.slice(1);
        
        content.appendChild(title);
        content.appendChild(type);
        
        div.appendChild(iconDiv);
        div.appendChild(content);
        
        div.addEventListener('click', () => {
            window.location.href = item.url;
        });
        
        return div;
    }

    // Calculate relevance score for a search result
    function getRelevanceScore(item, searchString) {
        let score = 0;
        const searchLower = searchString.toLowerCase();
        const titleLower = item.title.toLowerCase();

        // Exact title match gets highest score
        if (titleLower === searchLower) score += 100;
        
        // Title starts with search string
        if (titleLower.startsWith(searchLower)) score += 50;
        
        // Title contains search string
        if (titleLower.includes(searchLower)) score += 30;
        
        // Keyword exact match
        item.keywords.forEach(keyword => {
            if (keyword.toLowerCase() === searchLower) score += 25;
            if (keyword.toLowerCase().startsWith(searchLower)) score += 15;
            if (keyword.toLowerCase().includes(searchLower)) score += 10;
        });

        // Boost score for services
        if (item.type === 'service') score += 5;

        return score;
    }

    function search(query) {
        searchResults.innerHTML = '';
        if (!query) {
            // Show all services as suggestions when search is empty
            const topServices = searchData
                .filter(item => item.type === 'service')
                .slice(0, 5);
            
            const suggestionsTitle = document.createElement('div');
            suggestionsTitle.className = 'px-4 py-2 text-xs font-medium text-gray-500 bg-gray-50';
            suggestionsTitle.textContent = 'Popular Services';
            searchResults.appendChild(suggestionsTitle);
            
            topServices.forEach(service => {
                searchResults.appendChild(createResultItem(service));
            });
            return;
        }
        
        // Get and sort results by relevance
        const results = searchData
            .map(item => ({
                ...item,
                relevance: getRelevanceScore(item, query)
            }))
            .filter(item => item.relevance > 0)
            .sort((a, b) => b.relevance - a.relevance)
            .slice(0, 6); // Limit to top 6 results
        
        if (results.length === 0) {
            const noResults = document.createElement('div');
            noResults.className = 'px-4 py-3 text-sm text-gray-500';
            noResults.textContent = 'No results found';
            searchResults.appendChild(noResults);
            return;
        }

        // Group results by type
        const services = results.filter(r => r.type === 'service');
        const pages = results.filter(r => r.type === 'page');

        // Show services first
        if (services.length > 0) {
            const servicesTitle = document.createElement('div');
            servicesTitle.className = 'px-4 py-2 text-xs font-medium text-gray-500 bg-gray-50';
            servicesTitle.textContent = 'Services';
            searchResults.appendChild(servicesTitle);
            
            services.forEach(result => {
                searchResults.appendChild(createResultItem(result));
            });
        }

        // Then show pages
        if (pages.length > 0) {
            const pagesTitle = document.createElement('div');
            pagesTitle.className = 'px-4 py-2 text-xs font-medium text-gray-500 bg-gray-50';
            pagesTitle.textContent = 'Pages';
            searchResults.appendChild(pagesTitle);
            
            pages.forEach(result => {
                searchResults.appendChild(createResultItem(result));
            });
        }
    }

    // Event listeners
    searchInput.addEventListener('input', (e) => {
        search(e.target.value);
        // Show results container when input has focus
        searchResults.style.opacity = '1';
        searchResults.style.visibility = 'visible';
        searchResults.style.transform = 'translateY(0)';
    });

    // Show popular services on focus
    searchInput.addEventListener('focus', () => {
        search('');
    });

    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.innerHTML = '';
        }
    });

    // Prevent form submission
    searchInput.closest('form')?.addEventListener('submit', (e) => {
        e.preventDefault();
    });
</script> 